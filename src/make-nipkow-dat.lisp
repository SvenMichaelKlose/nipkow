(defun frame-name (x)
  (alet (format nil "~A" x)
    (list-string (+ (maptimes [identity #\0] (- 8 (length !))) (string-list !) (string-list ".ppm")))))

(defun make-frame (out x)
  (alet (fetch-file (frame-name x))
    (princ (code-char (+ audio_longest_pulse frame_sync_width)) out) ; Frame sync.
    (dotimes (y 16)
      (dotimes (x 16)
        (let ofs (+ #x0d (* y 64 3 3) (* x 3 4))
          (let v (integer (/ (+ (elt ! ofs)
                                              (elt ! (+ ofs 1))
                                              (elt ! (+ ofs 2))
                                              (elt ! (+ ofs 3))
                                              (elt ! (+ ofs 4))
                                              (elt ! (+ ofs 5))
                                              (elt ! (+ ofs 6))
                                              (elt ! (+ ofs 7))
                                              (elt ! (+ ofs 8))
                                              (elt ! (+ ofs 9))
                                              (elt ! (+ ofs 10))
                                              (elt ! (+ ofs 11)))
                                           3 4 16))
            (when (< 15 v)
              (error "Luminance of ~A.~%" v))
            (when (< v 0)
              (error "Luminance of ~A.~%" v))
          (princ (code-char (+ v audio_shortest_pulse)) out)))))))

(defun make-nipkow-dat ()
  (with-output-file out "obj/nipkow.dat"
    (dotimes (i 2990)
      (format t "Making frame ~Aâ€¦~%" i)
      (make-frame out (++ i)))))
